{"version":3,"file":"cjs.js","sources":["../source/trimSlashes.js","../source/parse.js","../source/sortNodes.js","../source/addPath.js","../source/matchPath.js","../source/index.js"],"sourcesContent":["// Remove the first and last slash\nexport default function trimSlashes(path) {\n\tconst from = path[0] === \"/\" ? 1 : undefined;\n\tconst to = path[path.length - 1] === \"/\" ? -1 : undefined;\n\n\treturn path.slice(from, to);\n}\n","import trimSlashes from \"./trimSlashes.js\";\n\nconst characters = \"[\\\\w\\\\!\\\\$&'\\\\(\\\\)\\\\*\\\\+\\\\,;\\\\=\\\\:@\\\\-\\\\.~]\";\nconst encoded = \"%[A-F0-9]{2}\";\n\nconst wildcard = \"(\\\\*)\";\nconst optional = \"(\\\\?)?\";\nconst key = \"(\\\\w+)\";\n\n// {key} {key?} {key*}, {key*2}\nconst param = `\\\\{${key}(?:${wildcard})?${optional}\\\\}`;\nconst literal = `(?:${characters}|${encoded})+`;\nconst segment = `(${literal})|(?:${param})`;\n\nconst regex = new RegExp(segment, \"g\");\n\nexport default path => {\n\tconst segments = [];\n\n\ttrimSlashes(path).replace(regex, setSegment);\n\n\tfunction setSegment(segment, literal, key, wildcard, optional) {\n\t\tsegments.push({\n\t\t\tsegment,\n\t\t\tliteral,\n\t\t\tkey,\n\t\t\tisOptional: Boolean(optional),\n\t\t\tisWildcard: Boolean(wildcard)\n\t\t});\n\t}\n\n\treturn segments;\n};\n","/*\n  Sort nodes in array to prioritize matching:\n\n  1. literal\n  2. {key}  - param\n  3. {key*} - wildcard\n  4. {key?} - optional\n*/\nexport default (A, B) => {\n\tconst AFirst = -1;\n\tconst BFirst = 1;\n\n\t// one is a literal, or both\n\tif (!A.key || !B.key) {\n\t\treturn !A.key ? AFirst : BFirst;\n\t}\n\n\t// both wildcards? can't do\n\tif (A.wildcard && B.wildcard) {\n\t\tthrow new Error(`Route conflict wildcards: ${A.segment} ${B.segment}`);\n\t}\n\n\t// one is a wildcard\n\tif (A.wildcard || B.wildcard) {\n\t\treturn A.wildcard ? BFirst : AFirst;\n\t}\n};\n","import parse from \"./parse.js\";\nimport sortNodes from \"./sortNodes.js\";\n\nexport default function addPath(route, target) {\n\tconst { path, data } = route;\n\tconst segments = parse(path);\n\n\t// set each segment on its branch\n\tbranching: for (let n = 0, branch = target; n < segments.length; ++n) {\n\t\tconst isLastSegment = n === segments.length - 1;\n\t\tconst node = segments[n];\n\n\t\t// add children for branching\n\t\tnode.children = [];\n\t\tnode.literal = node.literal && node.literal.toLowerCase();\n\n\t\t// check if segment is already defined\n\t\tfor (let i = 0; i < branch.children.length; ++i) {\n\t\t\tconst child = branch.children[i];\n\n\t\t\tif (child.segment === node.segment) {\n\t\t\t\tif (isLastSegment) {\n\t\t\t\t\tif (child.data) {\n\t\t\t\t\t\tthrow new Error(`Path conflict: ${path} segment: ${node.segment}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tchild.data = data;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbranch = child;\n\t\t\t\tcontinue branching;\n\t\t\t}\n\t\t}\n\n\t\t// if segment is optional add the\n\t\t// data on the parent also\n\t\tif (node.isOptional && isLastSegment) {\n\t\t\tif (branch.data != null) {\n\t\t\t\tthrow new Error(`Path conflict: ${path} segment: ${node.segment}`);\n\t\t\t}\n\n\t\t\tbranch.data = data;\n\t\t}\n\n\t\t// add data on last segment\n\t\tif (isLastSegment) {\n\t\t\tnode.data = data;\n\t\t}\n\n\t\t// add node to branch\n\t\tbranch.children.push(node);\n\n\t\t// sort child nodes for match type priority\n\t\tbranch.children.sort(sortNodes);\n\n\t\t// the child becomes the parent for the next segment\n\t\tbranch = node;\n\t}\n}\n","import trimSlashes from \"./trimSlashes.js\";\n\nexport default function matchPath(path, root) {\n\tconst segments = trimSlashes(path).split(\"/\");\n\tconst last = segments.length - 1;\n\tconst params = {};\n\n\tlet unmatched = null;\n\tlet branch = root;\n\n\tmatch: for (let n = 0; n < segments.length; ++n) {\n\t\tconst segment = segments[n];\n\n\t\tfor (let i = 0; i < branch.children.length; ++i) {\n\t\t\tconst node = branch.children[i];\n\n\t\t\t// match literal\n\t\t\tif (!node.key && node.literal === segment.toLowerCase()) {\n\t\t\t\tbranch = node;\n\t\t\t\tcontinue match;\n\t\t\t}\n\n\t\t\t// {key}\n\t\t\tif (node.key && !node.isWildcard) {\n\t\t\t\tparams[node.key] = segment;\n\t\t\t\tbranch = node;\n\t\t\t\tcontinue match;\n\t\t\t}\n\n\t\t\t// {key*}\n\t\t\tif (node.isWildcard) {\n\t\t\t\tparams[node.key] = segments.splice(n, last);\n\t\t\t\tbranch = node;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// TODO: {key?} - match optional segment\n\t\t}\n\n\t\t// if no node is matched, store the rest of the segments\n\t\tunmatched = segments.slice(n, segments.length).join(\"/\");\n\n\t\tbreak;\n\t}\n\n\t// mark null if no node is matched\n\tconst match = branch === root ? null : branch;\n\n\treturn { params, unmatched, node: match };\n}\n","import addPath from \"./addPath.js\";\nimport matchPath from \"./matchPath.js\";\n\nexport { addPath, matchPath };\n\n// TODO: add nested routes\nexport default class Router {\n\tconstructor({ routes }) {\n\t\tthis.root = {\n\t\t\tsegment: \"/\",\n\t\t\tchildren: [],\n\t\t\tdata: null,\n\t\t};\n\n\t\tif (routes) {\n\t\t\tfor (const route of routes) {\n\t\t\t\tthis.set(route);\n\t\t\t}\n\t\t}\n\t}\n\n\tset(route) {\n\t\tif (route.path === \"/\") {\n\t\t\tif (this.root.data) {\n\t\t\t\tthrow new Error(`Route \"/\" already set.`);\n\t\t\t}\n\n\t\t\tthis.root.data = route.data;\n\t\t} else {\n\t\t\taddPath(route, this.root);\n\t\t}\n\t}\n\n\tget(path) {\n\t\tif (path === \"/\") return this.root;\n\n\t\tconst { node } = matchPath(path, this.root);\n\n\t\treturn this.root === node ? null : node;\n\t}\n\n\tmatch(path) {\n\t\tif (path === \"/\") {\n\t\t\treturn {\n\t\t\t\tparams: {},\n\t\t\t\tdata: this.root.data,\n\t\t\t\tunmatched: undefined,\n\t\t\t};\n\t\t} else {\n\t\t\tconst match = matchPath(path, this.root);\n\n\t\t\treturn {\n\t\t\t\tparams: match.params,\n\t\t\t\tunmatched: match.unmatched,\n\t\t\t\tdata: match.node.data,\n\t\t\t};\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}